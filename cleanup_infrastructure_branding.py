#!/usr/bin/env python3
"""
Infrastructure Billing System Branding Cleanup Script
=====================================================

This script removes "Infrastructure Billing System" branding from all files
and replaces it with professional "Bill Generator" branding.

Usage:
    python cleanup_infrastructure_branding.py [repository_path]

Example:
    python cleanup_infrastructure_branding.py "C:/Users/Rajkumar/BillGeneratorV02"
    python cleanup_infrastructure_branding.py "C:/Users/Rajkumar/BillGeneratorV03"

Author: RAJKUMAR SINGH CHAUHAN
Email: crajkumarsingh@hotmail.com
Date: September 17, 2025
"""

import os
import sys
import re
from pathlib import Path
import argparse
from datetime import datetime

class BrandingCleanup:
    """
    Automated cleanup utility to remove Infrastructure Billing System branding
    """
    
    def __init__(self, repo_path):
        self.repo_path = Path(repo_path)
        self.changes_made = []
        self.files_processed = 0
        self.replacements_made = 0
        
        # Define replacement patterns
        self.replacements = {
            # Main branding replacements
            "🏛️ Infrastructure Billing System": "🏢 Enhanced Bill Generator",
            "Infrastructure Billing System": "Enhanced Bill Generator",
            "Infrastructure Billing System - OPTIMIZED": "Bill Generator - OPTIMIZED",
            "Infrastructure Billing System - Enhanced": "Enhanced Bill Generator",
            
            # Header and title replacements
            "Generated by Infrastructure Billing System": "Generated by Enhanced Bill Generator",
            "Generated by Infrastructure Billing System - RAJKUMAR SINGH CHAUHAN": "Generated on: {{ current_date }}",
            
            # Page title replacements
            'page_title="Infrastructure Billing System': 'page_title="Enhanced Bill Generator',
            
            # Comment replacements
            "* Infrastructure Billing System": "* Enhanced Bill Generator",
            "// Infrastructure Billing System": "// Enhanced Bill Generator",
            "# Infrastructure Billing System": "# Enhanced Bill Generator",
            
            # CSS and JavaScript comments
            "Infrastructure Billing System - ": "Enhanced Bill Generator - ",
        }
        
        # File patterns to process
        self.file_patterns = [
            "*.py",
            "*.html", 
            "*.js",
            "*.css",
            "*.bat",
            "*.md"
        ]
        
        # Directories to skip
        self.skip_dirs = {
            "__pycache__",
            ".git",
            "node_modules",
            ".venv",
            "venv",
            "env",
            "clean_output_*",
            "output_*",
            "temp",
            "tmp"
        }
    
    def should_skip_file(self, file_path):
        """Check if file should be skipped"""
        # Skip if in excluded directory
        for skip_dir in self.skip_dirs:
            if skip_dir in file_path.parts:
                return True
        
        # Skip binary files
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                f.read(100)  # Try to read first 100 chars
        except (UnicodeDecodeError, PermissionError):
            return True
        
        return False
    
    def process_file(self, file_path):
        """Process a single file for branding cleanup"""
        if self.should_skip_file(file_path):
            return False
        
        try:
            # Read file content
            with open(file_path, 'r', encoding='utf-8') as f:
                content = f.read()
            
            original_content = content
            file_changes = 0
            
            # Apply replacements
            for old_text, new_text in self.replacements.items():
                if old_text in content:
                    content = content.replace(old_text, new_text)
                    count = original_content.count(old_text)
                    file_changes += count
                    self.replacements_made += count
            
            # Write back if changes were made
            if content != original_content:
                with open(file_path, 'w', encoding='utf-8') as f:
                    f.write(content)
                
                self.changes_made.append({
                    'file': str(file_path.relative_to(self.repo_path)),
                    'changes': file_changes
                })
                
                print(f"✅ Updated: {file_path.relative_to(self.repo_path)} ({file_changes} changes)")
                return True
            
        except Exception as e:
            print(f"❌ Error processing {file_path}: {e}")
        
        return False
    
    def run_cleanup(self):
        """Run the complete branding cleanup"""
        print(f"🧹 Starting Infrastructure Billing System branding cleanup...")
        print(f"📁 Repository: {self.repo_path}")
        print(f"📅 Date: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        print("-" * 60)
        
        if not self.repo_path.exists():
            print(f"❌ Error: Repository path does not exist: {self.repo_path}")
            return False
        
        # Process all matching files
        for pattern in self.file_patterns:
            for file_path in self.repo_path.rglob(pattern):
                if file_path.is_file():
                    self.files_processed += 1
                    self.process_file(file_path)
        
        # Generate summary
        self.generate_summary()
        return True
    
    def generate_summary(self):
        """Generate cleanup summary"""
        print("\n" + "=" * 60)
        print("🎯 CLEANUP SUMMARY")
        print("=" * 60)
        print(f"📁 Repository: {self.repo_path}")
        print(f"📄 Files Processed: {self.files_processed}")
        print(f"🔄 Files Modified: {len(self.changes_made)}")
        print(f"✏️ Total Replacements: {self.replacements_made}")
        
        if self.changes_made:
            print("\n📋 MODIFIED FILES:")
            for change in self.changes_made:
                print(f"  ✅ {change['file']} ({change['changes']} changes)")
        else:
            print("\n✅ No files needed modification - repository already clean!")
        
        # Create summary file
        summary_file = self.repo_path / f"BRANDING_CLEANUP_SUMMARY_{datetime.now().strftime('%Y%m%d_%H%M%S')}.md"
        
        summary_content = f"""# 🧹 Infrastructure Billing System Branding Cleanup Summary

## 📅 Cleanup Date: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
## 📁 Repository: {self.repo_path}

---

## 🎯 Results

- **📄 Files Processed:** {self.files_processed}
- **🔄 Files Modified:** {len(self.changes_made)}
- **✏️ Total Replacements:** {self.replacements_made}

---

## 📋 Modified Files

"""
        
        if self.changes_made:
            for change in self.changes_made:
                summary_content += f"- ✅ `{change['file']}` ({change['changes']} changes)\n"
        else:
            summary_content += "✅ No files needed modification - repository already clean!\n"
        
        summary_content += f"""

---

## 🔄 Replacements Applied

"""
        
        for old_text, new_text in self.replacements.items():
            summary_content += f"- **Before:** `{old_text}`\n"
            summary_content += f"- **After:** `{new_text}`\n\n"
        
        summary_content += f"""
---

## ✅ Status: COMPLETE

All "Infrastructure Billing System" branding has been successfully replaced with professional "Enhanced Bill Generator" branding.

**Author:** RAJKUMAR SINGH CHAUHAN  
**Email:** crajkumarsingh@hotmail.com
"""
        
        try:
            with open(summary_file, 'w', encoding='utf-8') as f:
                f.write(summary_content)
            print(f"\n📄 Summary saved to: {summary_file.name}")
        except Exception as e:
            print(f"❌ Error saving summary: {e}")


def main():
    """Main function"""
    parser = argparse.ArgumentParser(
        description="Clean up Infrastructure Billing System branding from repository",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
Examples:
  python cleanup_infrastructure_branding.py "C:/Users/Rajkumar/BillGeneratorV02"
  python cleanup_infrastructure_branding.py "C:/Users/Rajkumar/BillGeneratorV03"
  python cleanup_infrastructure_branding.py .
        """
    )
    
    parser.add_argument(
        'repo_path',
        help='Path to the repository to clean up',
        default='.',
        nargs='?'
    )
    
    args = parser.parse_args()
    
    # Initialize and run cleanup
    cleanup = BrandingCleanup(args.repo_path)
    success = cleanup.run_cleanup()
    
    if success:
        print("\n🎉 Cleanup completed successfully!")
        return 0
    else:
        print("\n❌ Cleanup failed!")
        return 1


if __name__ == "__main__":
    sys.exit(main())